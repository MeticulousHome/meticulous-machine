name: Build all components

on:
  workflow_dispatch:
    inputs:
      image:
        description: 'Image config to use'
        type: string
        default: 'nightly'

  workflow_call:
    inputs:
      image:
        description: 'Image config to use'
        required: true
        type: string
        default: 'nightly'

permissions:
  contents: read
  actions: read
  id-token: write

env:
  IMAGE: ${{github.event.inputs.image || 'nightly' }}


jobs:

  build_components:
    name: Build ${{ matrix.component.name }}
    uses: meticuloushome/meticulous-machine/.github/workflows/build-component.yml@main
    with:
      build-option: ${{ matrix.component.build-option }}
      build-path: ${{ matrix.component.build-path }}
      runner: ${{ matrix.component.runner }}
      image: ${{ inputs['image'] }}
    secrets: inherit
    strategy:
      matrix:
        component:
          - { name: "Build u-boot", build-option: "bootloader", build-path: "components/bootloader/build" }
          - { name: "Build Linux", build-option: "linux", build-path: "components/linux-build" }
          - { name: "Build Debian", build-option: "debian", build-path: "components/debian-base/rootfs-base.tar.gz" }
          - { name: "Build psplash", build-option: "psplash", build-path: "components/psplash-build/", runner: "ubuntu-22.04" }
          - { name: "Build rauc", build-option: "rauc", build-path: "components/rauc/build", runner: "ubuntu-22.04" }
          - { name: "Build dial app", build-option: "dial", build-path: "components/meticulous-dial/out/make/deb/arm64/meticulous-ui.deb" }
          - { name: "Build web app", build-option: "web", build-path: "components/meticulous-web-ui/out/" }
          - { name: "Build firmware", build-option: "firmware", build-path: "components/meticulous-firmware-build" }
          - { name: "Build plotter ui", build-option: "plotter", build-path: "components/meticulous-plotter-ui/build/" }
          - { name: "Build crash reporter", build-option: "crash-reporter", build-path: "components/crash-reporter/target" }
