name: Build nightly images

on:
  schedule:
    - cron: '0 0 * * *'  # Nightly at midnight
  workflow_dispatch:  # Allows manual triggering

jobs:
  build-root:
    runs-on: ubuntu-24.04

    steps:
    - name: Maximize build space
      uses: easimon/maximize-build-space@master
      with:
        root-reserve-mb: 6000
        swap-size-mb: 1024
        remove-dotnet: 'true'
        remove-android: 'true'
        remove-haskell: 'true'
        remove-codeql: 'true'
        remove-docker-images: 'true'

    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Git authentication
      run: |
        git config --global url."https://${{ secrets.GH_REPO_WORKFLOW }}@github.com/".insteadOf "git@github.com:"

    - name: Get latest debian workflow run ID
      id: get_run_id
      run: |
        latest_run_id=$(curl -s -H "Authorization: token ${{ secrets.GH_REPO_WORKFLOW }}" \
          "https://api.github.com/repos/${{ github.repository }}/actions/workflows/build-debian-base.yml/runs?status=success&per_page=1" \
          | jq -r '.workflow_runs[0].id')
        echo "latest_run_id=${latest_run_id}" >> $GITHUB_ENV

    - name: Download debian artifact
      uses: actions/download-artifact@v4
      with:
        run-id: ${{ env.latest_run_id }}
        name: rootfs
        github-token: ${{ secrets.GH_REPO_WORKFLOW }}
        path: ./components/debian/output

    - name: Install Ubuntu dependencies
      run: ./update-sources.sh --install_ubuntu_dependencies

    - name: Downgrade qemu-user-static
      run: |
        sudo apt install -y --allow-downgrades ./misc/qemu-user-static_8.0.4+dfsg-1ubuntu5_amd64.deb
        sudo apt-mark hold qemu-user-static

    - name: Install qemu-img
      run: |
        sudo apt install -y qemu-utils

    - name: 'Exporting pio'
      run: echo "/home/runner/.platformio/penv/bin" >> $GITHUB_PATH

    - name: Checkout all the sources
      run: ./update-sources.sh  --backend --watcher --dial --web --firmware --history

    - name: Build components
      run: ./build-components.sh --dial --web --firmware --history

    - name: Build rootfs
      run: sudo ./make-rootfs.sh --all

    - name: Delete original debian rootfs
      run: rm -r ./components/debian/output/rootfs*

    - name: Upload rootfs artifact
      uses: actions/upload-artifact@v4
      with:
        name: rootfs.tar.gz
        path: meticulous-rootfs.tar.gz
        if-no-files-found: error

    - name: Build sdcard
      run: sudo ./make-sdcard.sh --image

    - name: Upload SDCard artifact
      uses: actions/upload-artifact@v4
      with:
        name: sdcard.img.gz
        path: sdcard.img.gz
        if-no-files-found: error

    - name: Upload EMMC artifact
      uses: actions/upload-artifact@v4
      with:
        name: emmc.img.gz
        path: emmc.img.gz
        if-no-files-found: error

  build-bundle:
    needs: build-root
    runs-on: ubuntu-24.04

    steps:
    - name: Maximize build space
      uses: easimon/maximize-build-space@master
      with:
        root-reserve-mb: 6000
        swap-size-mb: 1024
        remove-dotnet: 'true'
        remove-android: 'true'
        remove-haskell: 'true'
        remove-codeql: 'true'
        remove-docker-images: 'true'

    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Git authentication
      run: |
        git config --global url."https://${{ secrets.GH_REPO_WORKFLOW }}@github.com/".insteadOf "git@github.com:"

    - name: Clone private repository
      uses: actions/checkout@v4
      with:
        repository: MeticulousHome/rauc-secrets
        token: ${{ secrets.GH_REPO_WORKFLOW }}
        path: components/rauc-secrets

    - name: Download rootfs artifact
      uses: actions/download-artifact@v4
      with:
        name: 'rootfs.tar.gz'
        path: .

    - name: Install Ubuntu dependencies
      run: |
        sudo apt update && sudo apt install -y pigz
        sudo apt install --reinstall misc/rauc_*_amd64.deb

    - name: Build Bundles
      run: ./make-ota.sh  --nightly --cert components/rauc-secrets/keys/beta.rsa4096.cert.pem --key components/rauc-secrets/keys/beta.rsa4096.key.pem

    - name: Upload EMMC bundle
      uses: actions/upload-artifact@v4
      with:
        name: emmc-bundle.raucb
        path: rauc_meticulous_emmc_*.raucb
        if-no-files-found: error

  deploy-emmc-bundle:
    needs: build-bundle
    runs-on: ubuntu-24.04
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download emmc bundle
      uses: actions/download-artifact@v4
      with:
        name: 'emmc-bundle.raucb'
        path: .

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.x'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install requests attrs requests-toolbelt

    - name: Upload emmc bundle
      run: |
        python misc/hawkbit-upload.py \
          "${{ secrets.HAWKBIT_SERVER }}" \
          "${{ secrets.HAWKBIT_PORT }}" \
          *_emmc_*.raucb \
          ${{ secrets.HAWKBIT_USER }} \
          ${{ secrets.HAWKBIT_PASSWORD }} \
          "Nightly EMMC" \
          "Rootfs EMMC" \
          "$(date -u +'%Y-%m-%dT%H_%M_%S%z')" \
          "nightly" \
          "emmc"

  build-deployment-image:
    needs: build-root
    runs-on: ubuntu-24.04

    steps:
    - name: Maximize build space
      uses: easimon/maximize-build-space@master
      with:
        root-reserve-mb: 6000
        swap-size-mb: 1024
        remove-dotnet: 'true'
        remove-android: 'true'
        remove-haskell: 'true'
        remove-codeql: 'true'
        remove-docker-images: 'true'

    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Download sdcard artifact
      uses: actions/download-artifact@v4
      with:
        name: 'sdcard.img.gz'
        path: .

    - name: Download emmc artifact
      uses: actions/download-artifact@v4
      with:
        name: 'emmc.img.gz'
        path: .

    - name: Install Ubuntu dependencies
      run: sudo apt update && sudo apt install -y pigz qemu-utils e2fsprogs mount cloud-guest-utils

    - name: Decompress images
      run: pigz -d sdcard.img.gz emmc.img.gz

    - name: Build deployment image
      run: sudo ./make-deployment-image.sh --inplace

    - name: Rename image
      run: sudo mv sdcard.img deployment.img

    - name: Compress image
      run: pigz -kf deployment.img

    - name: Upload deployment image
      uses: actions/upload-artifact@v4
      with:
        name: deployment.img.gz
        path: deployment.img.gz
        if-no-files-found: error
