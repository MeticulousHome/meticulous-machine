#!/bin/sh -e
#
# Activate WIFI on Variscite VAR-SOM-MX8M-NANO
#

# Include common functions
. /etc/wifi/variscite-wireless

# GPIO pin to supply 3.3V WIFI voltage
WIFI_3V3_GPIO="gpiochip1 7"

# GPIO pin to supply 1.8V WIFI voltage
WIFI_1V8_GPIO="gpiochip1 20"

# GPIO pin to enable WIFI module
WIFI_EN_GPIO="gpiochip1 10"

# GPIO pin to enable BT module
BT_EN_GPIO="gpiochip1 6"

# WIFI MMC host
WIFI_MMC_HOST=30b40000.mmc
WIFI_MMC_PATH="/sys/bus/platform/drivers/sdhci-esdhc-imx"

# Get the SOM revision
get_somrev() {
	# Get the raw output
	raw_output=$(i2cget -f -y 0x0 0x52 0x1e)

	# Convert the output to decimal
	decimal_output=$(( $raw_output ))

	# Extract major and minor versions
	major=$(( ($decimal_output & 0xE0) >> 5 ))
	minor=$(( $decimal_output & 0x1F ))

	# Adjust the major version as per the specification
	major=$(( $major + 1 ))

	echo "$major.$minor"
}

# Check if wifi is bcm43xx
wifi_is_bcm43xx() {
	somrev=$(get_somrev)

	if [ "$(echo "$somrev < 2.0" | bc)" -eq 1 ]; then
		return 0
	else
		return 1
	fi
}

# Function to disable a network interface
disable_network_interface() {
	local iface="$1"

	# Check if the interface exists
	if ip link show "$iface" >/dev/null 2>&1; then
		ifconfig "$iface" down
		usleep 100000
	fi
}

# Power up WIFI chip
wifi_up()
{
	# Unbind WIFI device from MMC controller
	wifi_mmc_unbind ${WIFI_MMC_PATH} ${WIFI_MMC_HOST}

	# WIFI_3V3 up
	gpioset -t 0 --chip ${WIFI_3V3_GPIO}=1
	usleep 10000

	# WIFI_1V8 up
	gpioset -t 0 --chip ${WIFI_1V8_GPIO}=1

	# Wait at least 10ms
	usleep 10000

	# WLAN_EN up
	gpioset -t 0 --chip ${WIFI_EN_GPIO}=1

	# BT_EN up
	gpioset -t 0 --chip ${BT_EN_GPIO}=1

	# Wait at least 150ms
	usleep 200000

	# BT_EN down
	gpioset -t 0 --chip ${BT_EN_GPIO}=0

	# Bind WIFI device to MMC controller
	wifi_mmc_bind ${WIFI_MMC_PATH} ${WIFI_MMC_HOST}

	# Load WIFI driver
	modprobe brcmfmac
}

# Power down WIFI chip
wifi_down()
{
	# Disable network interface
	disable_network_interface wlan0

	# Unload WIFI driver
	modprobe -r brcmfmac_wcc
	modprobe -r brcmfmac

	# Unbind WIFI device from MMC controller
	wifi_mmc_unbind ${WIFI_MMC_PATH} ${WIFI_MMC_HOST}

	# WIFI_EN down
	gpioset -t 0 --chip ${WIFI_EN_GPIO}=0

	# BT_EN down
	gpioset -t 0 --chip ${BT_EN_GPIO}=0
	usleep 10000

	# WIFI_1V8 down
	gpioset -t 0 --chip ${WIFI_1V8_GPIO}=0

	# WIFI_3V3 down
	gpioset -t 0 --chip ${WIFI_3V3_GPIO}=0
}

# Return true if SOM has WIFI module assembled
wifi_is_available()
{
	# Read SOM options EEPROM field
	opt=$(i2cget -f -y 0x0 0x52 0x20)

	# Check WIFI bit in SOM options
	if [ $((opt & 0x1)) -eq 1 ]; then
		return 0
	else
		return 1
	fi
}

# Return true if WIFI should be started
wifi_should_not_be_started()
{
	if ! wifi_is_bcm43xx; then
		return 0
	fi

	# Do not start WIFI if it is not available
	if ! wifi_is_available; then
		return 0
	fi

	# Do not start WIFI if it is already started
	[ -d /sys/class/net/wlan0 ] && return 0

	return 1
}

# Return true if WIFI should not be stopped
wifi_should_not_be_stopped()
{
	if ! wifi_is_bcm43xx; then
		return 0
	fi

	# Do not stop WIFI if it is not available
	if ! wifi_is_available; then
		return 0
	fi

	return 1
}

# Start WIFI hardware
wifi_start()
{
	# Exit if WIFI should not be started
	wifi_should_not_be_started && exit 0

	# Try starting WIFI hardware
	for i in $(seq 1 3); do
		# Up WIFI
		wifi_up

		# Exit if WIFI interface exists
		wifi_interface_exists "wlan0" && exit 0

		# Down WIFI
		wifi_down

		# Wait enough time for discharge
		sleep 5
	done

	exit 1
}

# Stop WIFI hardware
wifi_stop()
{
	# Exit if WIFI should not be stopped
	wifi_should_not_be_stopped && exit 0

	# Down WIFI
	wifi_down
}

###########################
#  Execution starts here  #
###########################
case $1 in
start)
	wifi_start
	;;
stop)
	wifi_stop
	;;
esac

exit 0
